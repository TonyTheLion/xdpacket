---
# multicast DNS mangling using new grammar
# in this example:
# eth0 == 192.168.1.1/24 -> client 192.168.1.20
# eth1 == 10.1.1.1/24 -> chromecast 10.1.1.20
xdpk:
  # field: a named set of bytes to be hashed or written
  - field: ip proto
    offt: 25
    len: 1
  - field: ip src
    offt: 26
    len: 4
  - field: ip dst
    offt: 32
    len: 4
  - field: mdns rec
    offt: 377
    len: 2
  - field: mdns rec addr
    offt: -4
    len: 4

  # node is a named set of matches and mangles (bytes to be written)
  - node: client unicast
    match:
      - ip proto: 0x1  ## ICMP
      - ip src: 192.168.1.20
      - ip dst: 192.168.1.1
    mangle:
      - ip src: 10.1.1.1
      - ip dst: 10.1.1.20
  - node: client 2 unicast
    match:
      - ip proto: 0x1  ## ICMP
      - ip src: 192.168.1.21
      - ip dst: 192.168.1.1
    mangle:
      - ip src: 10.1.1.1
      - ip dst: 10.1.1.21
  - node: chrome unicast
    match:
      - ip src: 10.1.1.20
      - ip dst: 10.1.1.1
    mangle:
      ip src: 192.168.1.1
      ip dst: 192.168.1.20
  - node: client mdns
    match:
      - ip src: 192.168.1.20
      - ip dst: 224.0.0.251
    mangle:
      - ip src: 10.1.1.1
  - node: chrome mdns A
    match:
      - ip src: 10.1.1.20
      - ip dst: 224.0.0.251
      - mdns rec: 0x0001  # DNS A record
    mangle:
      - ip src: 192.168.1.1
      - mdns rec addr: 192.168.1.1
  # MUST be matched AFTER preceding (more specific) 'A' rule
  - node: chrome mdns
    match:
      - ip src: 10.1.1.20
      - ip dst: 224.0.0.251
    mangle:
      - ip src: 192.168.1.1

  # iface is a system interface and a sequence of node+output tuples to execute
  - iface: eth0
    nodes:
      - client unicast: eth1
      - client 2 unicast: eth1
      - client mdns: eth1
  - iface: eth1
    nodes:
      - chrome unicast: eth0
      - chrome mdns A: eth0
      - chrome mdns: eth0
